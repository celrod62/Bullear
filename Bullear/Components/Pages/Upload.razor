@page "/upload"

<PageTitle>File Upload</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <span class="bi bi-upload me-2"></span>File Upload
            </h1>
            <p class="text-muted mb-4">Upload CSV files using drag-and-drop or file browser. Only CSV files are accepted.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <!-- Drag and Drop Upload Area -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-cloud-upload me-2"></span>Drag & Drop Upload
                    </h5>
                </div>
                <div class="card-body">
                    <div class="upload-area @(isDragOver ? "drag-over" : "")" 
                         @ondragover="HandleDragOver" 
                         @ondragleave="HandleDragLeave" 
                         @ondrop="HandleDrop"
                         @onclick="() => fileInput.Click()">
                        
                        <div class="upload-content text-center">
                            <div class="upload-icon mb-3">
                                <span class="bi bi-cloud-upload display-1 text-muted"></span>
                            </div>
                            <h4 class="upload-text">Drop your CSV file here</h4>
                            <p class="text-muted">or click to browse files</p>
                            <small class="text-muted">Only CSV files are accepted</small>
                        </div>
                    </div>

                    <!-- Hidden file input -->
                    <InputFile id="fileInput" 
                               class="d-none" 
                               OnChange="OnFileSelected" 
                               accept=".csv" />
                </div>
            </div>

            <!-- File Browser Upload -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-folder2-open me-2"></span>File Browser Upload
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="fileBrowser" class="form-label">Select CSV File</label>
                        <InputFile id="fileBrowser" 
                                   class="form-control" 
                                   OnChange="OnFileSelected" 
                                   accept=".csv" />
                        <div class="form-text">Choose a CSV file from your computer</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Upload Status and File Info -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-info-circle me-2"></span>Upload Status
                    </h5>
                </div>
                <div class="card-body">
                    @if (selectedFile != null)
                    {
                        <div class="alert alert-success">
                            <div class="d-flex align-items-center">
                                <span class="bi bi-check-circle-fill me-2"></span>
                                <strong>File Selected</strong>
                            </div>
                        </div>
                        
                        <div class="file-info">
                            <h6>File Details:</h6>
                            <ul class="list-unstyled">
                                <li><strong>Name:</strong> @selectedFile.Name</li>
                                <li><strong>Size:</strong> @FormatFileSize(selectedFile.Size)</li>
                                <li><strong>Type:</strong> @selectedFile.ContentType</li>
                                <li><strong>Last Modified:</strong> @selectedFile.LastModified.ToString("yyyy-MM-dd HH:mm")</li>
                            </ul>
                        </div>

                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="UploadFile" disabled="@isUploading">
                                @if (isUploading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Uploading...</span>
                                }
                                else
                                {
                                    <span class="bi bi-upload me-2"></span>
                                    <span>Upload File</span>
                                }
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearFile">
                                <span class="bi bi-x-circle me-2"></span>
                                Clear Selection
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <span class="bi bi-file-earmark-text display-4 d-block mb-3"></span>
                            <p>No file selected</p>
                            <small>Select a CSV file to see details here</small>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(uploadMessage))
                    {
                        <div class="alert @(uploadSuccess ? "alert-success" : "alert-danger") mt-3">
                            <span class="bi @(uploadSuccess ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill") me-2"></span>
                            @uploadMessage
                        </div>
                    }
                </div>
            </div>

            <!-- Upload Guidelines -->
            <div class="card mt-3">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <span class="bi bi-lightbulb me-2"></span>Upload Guidelines
                    </h6>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        <li class="mb-2">
                            <span class="bi bi-check-circle text-success me-2"></span>
                            Only CSV files are accepted
                        </li>
                        <li class="mb-2">
                            <span class="bi bi-check-circle text-success me-2"></span>
                            Maximum file size: 10MB
                        </li>
                        <li class="mb-2">
                            <span class="bi bi-check-circle text-success me-2"></span>
                            Ensure proper CSV formatting
                        </li>
                        <li>
                            <span class="bi bi-check-circle text-success me-2"></span>
                            Headers should be in the first row
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .upload-area {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 3rem 2rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .upload-area:hover {
        border-color: #0d6efd;
        background-color: #e7f1ff;
    }

    .upload-area.drag-over {
        border-color: #0d6efd;
        background-color: #e7f1ff;
        transform: scale(1.02);
    }

    .upload-content {
        pointer-events: none;
    }

    .upload-icon {
        opacity: 0.7;
    }

    .file-info {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 1rem;
        margin: 1rem 0;
    }

    .file-info ul li {
        margin-bottom: 0.5rem;
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }
</style>

@code {
    private IBrowserFile? selectedFile;
    private bool isDragOver = false;
    private bool isUploading = false;
    private string uploadMessage = "";
    private bool uploadSuccess = false;

    private void HandleDragOver(DragEventArgs e)
    {
        e.PreventDefault();
        isDragOver = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        e.PreventDefault();
        isDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        e.PreventDefault();
        isDragOver = false;

        var files = e.DataTransfer?.Files;
        if (files != null && files.Length > 0)
        {
            var file = files[0];
            await ProcessFile(file);
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            await ProcessFile(e.File);
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        // Validate file type
        if (!IsValidCsvFile(file))
        {
            uploadMessage = "Please select a valid CSV file.";
            uploadSuccess = false;
            selectedFile = null;
            return;
        }

        // Validate file size (10MB limit)
        if (file.Size > 10 * 1024 * 1024)
        {
            uploadMessage = "File size must be less than 10MB.";
            uploadSuccess = false;
            selectedFile = null;
            return;
        }

        selectedFile = file;
        uploadMessage = "";
        uploadSuccess = false;
    }

    private bool IsValidCsvFile(IBrowserFile file)
    {
        var fileName = file.Name.ToLowerInvariant();
        return fileName.EndsWith(".csv") || file.ContentType == "text/csv" || file.ContentType == "application/csv";
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private async Task UploadFile()
    {
        if (selectedFile == null) return;

        isUploading = true;
        uploadMessage = "";

        try
        {
            // TODO: Implement actual file upload logic here
            // For now, simulate upload delay
            await Task.Delay(2000);

            uploadMessage = $"File '{selectedFile.Name}' uploaded successfully!";
            uploadSuccess = true;
        }
        catch (Exception ex)
        {
            uploadMessage = $"Upload failed: {ex.Message}";
            uploadSuccess = false;
        }
        finally
        {
            isUploading = false;
        }
    }

    private void ClearFile()
    {
        selectedFile = null;
        uploadMessage = "";
        uploadSuccess = false;
    }
}
